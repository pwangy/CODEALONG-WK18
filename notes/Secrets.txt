Handling Secrets - Damien, video

now that we're writing API:s which handle:
  passwords
  secret keys
  etc
we need a way to handle that sensitive information while keeping it secure when writing code.

obvsly: don't store passwords or other sensitive data on github. 

To illustrate: 
  sendgrid is service which allows users to send emails to lists (marketing) or it can help users retreive passwords or other automated transactional emails (https://sendgrid.com/use-cases/transactional-email/)

  users need to have an api key to use the service, however, if the repo which stores the code with their api requests is public, this creates a security issue.

  DON'T DO THIS!

never publish sensitive data on github since it captures the complete history of everything you commit.
ie. you can't undo this.


:: Client Side Secrets
Remember that all code meant to be read by a browser should be considered public no matter where it is housed. If a browser can read it, it is public.

Therefore: never commit private keys in react projects.

private keys meaning keys to an API which 
  - can do something other than just fetching or getting information (so anything that can post or modify data would be private.)
  - are personal to you as an individual.
  - doc for a particular api you have signed up to use might specify wether it is ok to use your key publicly or to use in your codebase

In the case of private keys. you'll need an api to be a middleman/ authenticate you so that you can sign in and then make authenticated requests.

:: Whiteboard
  We can use Environment Variables to send information to our code wihtout it existing in the code itself.

  to write these we would send them in the command line before sending start command

  note on style: all caps, no spaces, use underscores for spaces. double quotes are allowed if you need to create space between things.

  t.ex:
  MY_SECRET=HELLO npm start
  or even
  MY_SECRET="HELLO" npm start

  "MY_SECRET=HELLO" is our environment variable.

  in our code, we can access this variable by using:
  process.env.MY_SECRET
  
  
  :: Using secret key w/ Heroku
  go to your api dashboard > settings
  under Config Vars

  :: (npm) dotenv is a library which helps us when we work on projects where there is a LOT of sensitive data to pass.
    1. make sure dotenv is installed
    2. connect dotenv in server.js
    3. write whatever in your env file
    4. include .env file in .gitignore list!

    you can always check the list of files that can be committed by running: "git status"

    note: dotenv is a useful development tool. when deploying for example to Heroku, secrets should still be defined in the Config Variables settings. 